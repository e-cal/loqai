#!/usr/bin/env python
import asyncio
import contextlib
import json
import multiprocessing
import os
import subprocess
import time
import wave

import pyaudio

from llamapi import get_response

CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 2
RATE = 16000

import argparse

parser = argparse.ArgumentParser()
parser.add_argument(
    "-i", "--interval", type=float, default=5, help="Transcription interval (s)"
)
args = parser.parse_args()

INTERVAL = args.interval

p = pyaudio.PyAudio()
stream = p.open(
    format=FORMAT,
    channels=CHANNELS,
    rate=RATE,
    input=True,
    frames_per_buffer=CHUNK,
)

print("* recording")


def write(frames, p):
    wf = wave.open(".__tmp.wav", "wb")
    wf.setnchannels(2)
    wf.setsampwidth(p.get_sample_size(pyaudio.paInt16))
    wf.setframerate(16000)
    wf.writeframes(b"".join(frames))
    wf.close()


def run(frames, p):
    write(frames, p)
    subprocess.call(
        ["./transcribe", "-f", ".__tmp.wav", "-o", ".__tmp", "--format", "json"],
        stdout=open(os.devnull, "wb"),
        stderr=open(os.devnull, "wb"),
    )

    with open(".__tmp.json", "r") as f:
        out = json.loads(f.read())

    text = [line["text"] for line in out["transcription"]]
    # for line in out["transcription"]:
    #     ts = line["timestamps"]
    #     offsets = line["offsets"]
    #     text.append(line["text"])

    text = "\n".join(text)
    print("You:\n" + text)

    # TODO: make this async
    # maybe need a queue or something?
    res = get_response(text, n_predict=50)
    print("Response:\n" + res)


# for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
sec = int(RATE / CHUNK)

i = 0
frames = []
try:
    while True:
        data = stream.read(CHUNK)
        frames.append(data)
        if i == INTERVAL * sec:  # every 3 seconds
            # TODO: can I pipe frames as bytes to ./stt ?
            # // do I need to write to a file? surely I can pass the bytes directly
            start = time.time()
            proc = multiprocessing.Process(
                target=run,
                args=(
                    frames,
                    p,
                ),
            )
            proc.start()

            # text response just post to localhost:8080
            # when i have text response
            # write to file and play (probably using subprocess)

            frames = []
            i = 0

            time.sleep(100)
            break

        i += 1
except KeyboardInterrupt:
    pass

print("\ncleaning up...")

stream.stop_stream()
stream.close()
p.terminate()

subprocess.call(["rm", ".__tmp.wav", ".__tmp.json"])
